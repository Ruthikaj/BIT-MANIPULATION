RECURSION:

double myPow(double x, int n) {
    if (n==0) return 1;
    if (n==1) return x;
    if (n==-1) return 1/x;
    return myPow(x*x,n/2)*(n%2==0?1:n>0?x:1/x);
}


BIT MANIPULATION:

class Solution {
public:
    double myPow(double x, int n) {
        double ans=1.0;
        long long nn=n;

        if(nn<0)
        {
            nn= -1 * nn;
        }

        while(nn)
        {
            if(nn % 2)
            {
                ans = ans * x;
                nn = nn-1;
            }
            else
            {
                x =x *x;
                nn = nn/2;
            }
        }

        if(n<0)
        {
            ans= (double)(1.0)/(double) (ans);
            
        }

        return ans;
    }
};




DRY RUN:

Let's walk through the code step by step to understand how it works, and we'll also dry-run it with an example.

### Function Purpose
The function `myPow` computes \(x^n\), i.e., raises `x` to the power of `n`. It does so efficiently using the method of **exponentiation by squaring**. 

---

### Code Breakdown:

```cpp
double myPow(double x, int n) {
```
- This is the function signature, where `x` is the base, and `n` is the exponent. The return type is `double`, as the result can be a fractional number.

---

```cpp
double ans = 1.0;
```
- `ans` is initialized to `1.0`. This will store the result of \(x^n\). Initially, the result is \(1\) because multiplying by 1 won't change the value.

---

```cpp
long long nn = n;
```
- The exponent `n` is copied to a variable `nn` of type `long long`. This is done because `n` can be negative, and we want to handle negative exponents correctly while working with positive values inside the loop.

---

```cpp
if (nn < 0) {
    nn = -1 * nn;
}
```
- If `n` is negative, we convert it to a positive value by multiplying it by `-1`. We will handle the negative exponent case later (by taking the reciprocal of the result).

---

### The While Loop (Exponentiation by Squaring):
```cpp
while (nn) {
```
- This loop runs while `nn` is greater than `0`. It’s the core part of the algorithm where we perform exponentiation by squaring.

---

```cpp
if (nn % 2) {
    ans = ans * x;
    nn = nn - 1;
}
```
- If `nn` is **odd** (`nn % 2 != 0`), we multiply `ans` by `x` (this is because \(x^n = x^{n-1} \times x\) when `n` is odd).
- Then, we reduce `nn` by `1` (since we handled one multiplication).

---

```cpp
else {
    x = x * x;
    nn = nn / 2;
}
```
- If `nn` is **even**, we square `x` (because \(x^n = (x^2)^{n/2}\)) and reduce `nn` by half (since squaring handles two powers at once).

---

```cpp
if (n < 0) {
    ans = 1.0 / ans;
}
```
- If the original `n` was negative, we take the reciprocal of `ans`. This step handles negative exponents, as \(x^{-n} = \frac{1}{x^n}\).

---

```cpp
return ans;
```
- Finally, we return the computed value of `ans`, which is \(x^n\).

---

### Dry Run Example:

Let's dry-run the code with the following example:
- `x = 2.0`
- `n = 10`

We are calculating \(2.0^{10} = 1024.0\).

#### Step-by-Step Execution:

1. **Initial Setup**:
   - `x = 2.0`, `n = 10`
   - `ans = 1.0`
   - `nn = 10` (because `n` is positive)

2. **First iteration of the while loop** (`nn = 10`):
   - `nn` is **even**, so:
     - Square `x`: \(x = 2.0 \times 2.0 = 4.0\)
     - Divide `nn` by 2: `nn = 10 / 2 = 5`

3. **Second iteration of the while loop** (`nn = 5`):
   - `nn` is **odd**, so:
     - Multiply `ans` by `x`: \(ans = 1.0 \times 4.0 = 4.0\)
     - Subtract 1 from `nn`: `nn = 5 - 1 = 4`

4. **Third iteration of the while loop** (`nn = 4`):
   - `nn` is **even**, so:
     - Square `x`: \(x = 4.0 \times 4.0 = 16.0\)
     - Divide `nn` by 2: `nn = 4 / 2 = 2`

5. **Fourth iteration of the while loop** (`nn = 2`):
   - `nn` is **even**, so:
     - Square `x`: \(x = 16.0 \times 16.0 = 256.0\)
     - Divide `nn` by 2: `nn = 2 / 2 = 1`

6. **Fifth iteration of the while loop** (`nn = 1`):
   - `nn` is **odd**, so:
     - Multiply `ans` by `x`: \(ans = 4.0 \times 256.0 = 1024.0\)
     - Subtract 1 from `nn`: `nn = 1 - 1 = 0`

7. **Exit the while loop** (`nn = 0`):
   - The loop ends as `nn = 0`.

8. **Final Step**:
   - Since `n` is positive, we don’t change `ans`. The result is \(1024.0\).

### Dry Run with Negative Exponent:

Let’s dry-run with a negative exponent:
- `x = 2.0`, `n = -3`

We are calculating \(2.0^{-3} = 1 / (2.0^3) = 0.125\).

#### Step-by-Step Execution:

1. **Initial Setup**:
   - `x = 2.0`, `n = -3`
   - `ans = 1.0`
   - `nn = 3` (convert `n` to positive)

2. **First iteration of the while loop** (`nn = 3`):
   - `nn` is **odd**, so:
     - Multiply `ans` by `x`: \(ans = 1.0 \times 2.0 = 2.0\)
     - Subtract 1 from `nn`: `nn = 3 - 1 = 2`

3. **Second iteration of the while loop** (`nn = 2`):
   - `nn` is **even**, so:
     - Square `x`: \(x = 2.0 \times 2.0 = 4.0\)
     - Divide `nn` by 2: `nn = 2 / 2 = 1`

4. **Third iteration of the while loop** (`nn = 1`):
   - `nn` is **odd**, so:
     - Multiply `ans` by `x`: \(ans = 2.0 \times 4.0 = 8.0\)
     - Subtract 1 from `nn`: `nn = 1 - 1 = 0`

5. **Exit the while loop** (`nn = 0`):
   - The loop ends as `nn = 0`.

6. **Final Step**:
   - Since `n` was negative, we take the reciprocal: \(ans = 1 / 8.0 = 0.125\).

The result is \(0.125\).
